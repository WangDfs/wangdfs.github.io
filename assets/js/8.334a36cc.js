(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{320:function(e,t,n){"use strict";n.r(t);var o=n(4),r=Object(o.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"java异常处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java异常处理"}},[e._v("#")]),e._v(" java异常处理")]),e._v(" "),t("p",[t("strong",[e._v("1.所有的异常都是从Throwable继承而来的，是所有异常的共同祖先。")])]),e._v(" "),t("p",[e._v("**2.Throwable有两个子类，Error和Exception。**其中Error是错误，对于所有的编译时期的错误以及系统错误都是通过Error抛出的。这些错误表示故障发生于虚拟机自身、或者发生在虚拟机试图执行应用时。")]),e._v(" "),t("p",[t("strong",[e._v("3.Exception")]),e._v("，是另外一个非常重要的异常子类。它规定的异常是程序本身可以处理的异常。异常和错误的区别是，异常是可以被处理的，而错误是没法处理的。")]),e._v(" "),t("p",[t("strong",[e._v("4.Checked Exception")]),e._v("可检查的异常，这是编码时非常常用的，所有checked exception都是需要在代码中处理的。它们的发生是可以预测的，正常的一种情况，可以合理的处理。比如IOException，或者一些自定义的异常。除了RuntimeException及其子类以外，都是checked exception。")]),e._v(" "),t("p",[t("strong",[e._v("5.Unchecked Exception")]),e._v("RuntimeException及其子类都是unchecked exception。比如NPE空指针异常，除数为0的算数异常ArithmeticException等等，这种异常是运行时发生，无法预先捕捉处理的。Error也是unchecked exception，也是无法预先处理的。")])])}),[],!1,null,null,null);t.default=r.exports}}]);