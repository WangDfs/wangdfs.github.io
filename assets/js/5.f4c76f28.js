(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{319:function(v,_,a){"use strict";a.r(_);var t=a(4),r=Object(t.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h3",{attrs:{id:"java基础"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#java基础"}},[v._v("#")]),v._v(" java基础")]),v._v(" "),_("h4",{attrs:{id:"java虚拟机"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#java虚拟机"}},[v._v("#")]),v._v(" java虚拟机")]),v._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[v._v("java虚拟机")])]),v._v(" "),_("p",[v._v("jvm(java虚拟机)可以让java代码一次编写，到处运行，只要在不同的平台安装不同的jvm虚拟机，就可以运行字节码文件。")]),v._v(" "),_("p",[_("strong",[v._v("jvm运行字节码文件时是把字节码文件转换为机器码然后在运行")])]),v._v(" "),_("p",[_("strong",[v._v("编译的结果是产生字节码文件，必须通过jvm转换成机器码才能运行")])]),v._v(" "),_("p",[_("strong",[v._v("java程序是跨平台的，意思是java程序可以在不同的平台运行jvm不是跨平台的，不同的平台，安装的jvm不同")])]),v._v(" "),_("h4",{attrs:{id:"java类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#java类"}},[v._v("#")]),v._v(" java类")]),v._v(" "),_("p",[_("strong",[v._v("一个java文件可以有多个类，但是只能有一个public类")])]),v._v(" "),_("p",[_("strong",[v._v("java文件名必须和这个类名一致")])]),v._v(" "),_("h4",{attrs:{id:"java访问权限"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#java访问权限"}},[v._v("#")]),v._v(" java访问权限")]),v._v(" "),_("p",[v._v("java访问权限有四种，privite，default，protected,public")]),v._v(" "),_("p",[_("strong",[v._v("1.privite:只能被本类中的内部成员访问")])]),v._v(" "),_("p",[_("strong",[v._v("2.default:可以被本类的内部成员访问,也可以被该包的其他类访问")])]),v._v(" "),_("p",[_("strong",[v._v("3.proteced:可以被本类的内部成员访问,也可以被该包的其他类访问,也可以被它的子类访问")])]),v._v(" "),_("p",[_("strong",[v._v("4.public:可以被任意包任意类所访问")])]),v._v(" "),_("h4",{attrs:{id:"java数据类型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#java数据类型"}},[v._v("#")]),v._v(" java数据类型")]),v._v(" "),_("p",[_("strong",[v._v("java基本数据类型")])]),v._v(" "),_("p",[v._v("整形（byte，short，int，long）")]),v._v(" "),_("p",[v._v("浮点形（float，double）")]),v._v(" "),_("p",[v._v("字符类型（char）")]),v._v(" "),_("p",[v._v("布尔类型（boolean）")]),v._v(" "),_("p",[_("strong",[v._v("java引用数据类型")])]),v._v(" "),_("p",[v._v("引用数据类型其实是对一个对象的引用，可以将引用类型分为三类")]),v._v(" "),_("p",[_("strong",[v._v("数组，类，接口")])]),v._v(" "),_("p",[v._v("引用类型的本质是通过指针指向堆区中的一块内存空间，只是java不在沿用指针这个说法而已。")]),v._v(" "),_("h4",{attrs:{id:"java变量"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#java变量"}},[v._v("#")]),v._v(" java变量")]),v._v(" "),_("p",[_("strong",[v._v("java变量分为成员变量和局部变量")])]),v._v(" "),_("p",[_("strong",[v._v("成员变量")])]),v._v(" "),_("p",[v._v("1.成员变量是在类的范围里定义的变量")]),v._v(" "),_("p",[v._v("2.成员变量有默认初始值")]),v._v(" "),_("p",[v._v("3.如果成员变量前面没有static修饰，这个变量也叫实例变量，存储于该对象的堆内存中，其生命周期和"),_("strong",[v._v("该对象")]),v._v("相同。")]),v._v(" "),_("p",[v._v("4.如果前面有static修饰，这个变量也叫类变量，它存储于方法区中，其生命周期和"),_("strong",[v._v("该类")]),v._v("相同")]),v._v(" "),_("p",[v._v("5.成员变量可以和局部变量重名，但是遵循就近原则。")]),v._v(" "),_("p",[_("strong",[v._v("局部变量")])]),v._v(" "),_("p",[v._v("1.局部变量是方法里定义的变量。")]),v._v(" "),_("p",[v._v("2.局部变量没有默认初始值。")]),v._v(" "),_("p",[v._v("3.局部变量存储于栈内存中，作用范围结束，空间会自动释放。")]),v._v(" "),_("p",[_("strong",[v._v("其实java没有真正的全局变量，全局变量其实就是指成员变量")])]),v._v(" "),_("p",[v._v("实例变量若为引用数据类型，其默认值为null，若为其他，其默认值一般为0，布尔类型为false。")]),v._v(" "),_("h4",{attrs:{id:"java成员方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#java成员方法"}},[v._v("#")]),v._v(" java成员方法")]),v._v(" "),_("p",[v._v("在java中需要有一些成员方法，当执行成员方法时，会在"),_("strong",[v._v("栈区")]),v._v("新开辟一块空间，当这个成员方法执行完毕之后，栈区空间会被释放")]),v._v(" "),_("p",[v._v("成员方法可以提高代码的复用性，可以将代码内部实现的细节封装起来，其他的用户只需要进行调用。")]),v._v(" "),_("p",[_("strong",[v._v("1.成员方法不能嵌套定义")])]),v._v(" "),_("p",[_("strong",[v._v("2.一个成员方法最多有一个返回值，但是要返回多个结果，可以返回一个数组。")])]),v._v(" "),_("p",[_("strong",[v._v("3.成员方法的返回值可以是任意的类型（基本类型和引用类型）")])]),v._v(" "),_("p",[_("strong",[v._v("4.如果方法前面有类型的话，那么return的类型应该保持一致")])]),v._v(" "),_("p",[_("strong",[v._v("成员方法传参机制")])]),v._v(" "),_("p",[v._v("如果是基本数据类型的话，那么就是进行的值传递，不会改变形参的值。")]),v._v(" "),_("p",[v._v("如果是引用类型的话，那么传递的是地址，会间接改变形参的值。")]),v._v(" "),_("p",[v._v("（因为引用类型的值是存放在堆区的，成员方法还是main栈里面调用的都是那个指向堆区的地址）")]),v._v(" "),_("h4",{attrs:{id:"java方法重载"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#java方法重载"}},[v._v("#")]),v._v(" java方法重载")]),v._v(" "),_("p",[v._v("重载就是同名函数，但是参数列表不一样，返回类型没有要求。")]),v._v(" "),_("p",[v._v("重载减轻了起名和记名的麻烦")]),v._v(" "),_("h4",{attrs:{id:"java可变参数"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#java可变参数"}},[v._v("#")]),v._v(" java可变参数")]),v._v(" "),_("p",[v._v("可变参数的本质其实就是数组")]),v._v(" "),_("p",[v._v("可变参数可以为数组，（就是把数组当实参传进去）")]),v._v(" "),_("p",[v._v("一个形参列表中只能出现一个可变参数，但是必须放在最后")]),v._v(" "),_("p",[v._v("public int sum(int ... nums) "),_("strong",[v._v("nums就是一个可变参数")])]),v._v(" "),_("p",[v._v("int a[] = {1,2,3};")]),v._v(" "),_("p",[v._v("sum(a);  "),_("strong",[v._v("把数组当实参传进去")])]),v._v(" "),_("h4",{attrs:{id:"包装类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#包装类"}},[v._v("#")]),v._v(" 包装类")]),v._v(" "),_("p",[v._v("java为每个基本数据类型提供了一个相对应的引用类型，这就是包装类，（基本数据类型不具备对象的特征）")]),v._v(" "),_("p",[v._v("自动装箱和自动拆箱是jdk1.5提供的功能")]),v._v(" "),_("p",[v._v("自动装箱：可以把一个基本数据类型的数据赋值给包装类型")]),v._v(" "),_("p",[v._v("自动拆箱：可以把一个包装类型的数据赋值给基本数据类型")]),v._v(" "),_("p",[v._v("比较Integer和double的值")]),v._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("Integer i = ``100``;\nDouble d = ``100.00``;\nSystem.out.println(i.doubleValue() == d.doubleValue());\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br"),_("span",{staticClass:"line-number"},[v._v("3")]),_("br")])]),_("p",[v._v("比较int和Integer时Integer会自动拆箱为int")]),v._v(" "),_("h4",{attrs:{id:"构造方法构造器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#构造方法构造器"}},[v._v("#")]),v._v(" 构造方法构造器")]),v._v(" "),_("p",[v._v("1.构造方法是创建对象时，为对象的各个属性进行初始化的方法。")]),v._v(" "),_("p",[v._v("2.方法名和类名相同")]),v._v(" "),_("p",[v._v("3.没有返回值")]),v._v(" "),_("p",[v._v("4.构造方法的调用由系统完成")]),v._v(" "),_("p",[v._v("5.构造方法也称构造器，构造方法也可以进行重载")]),v._v(" "),_("p",[v._v("6.如果没有定义构造器，那么系统会自动生成一个无参构造器")]),v._v(" "),_("p",[v._v("7.this指向的是当前对象")]),v._v(" "),_("p",[v._v('new person("小明"，18);')]),v._v(" "),_("p",[_("strong",[v._v("会在堆区开辟一块空间，然后常量区会有小明和18两个具体的值，堆区会有两个地址指向小明和18")])]),v._v(" "),_("p",[v._v('person p = new person("小明"，18);')]),v._v(" "),_("p",[_("strong",[v._v("p会指向堆区的那一块空间")])]),v._v(" "),_("h4",{attrs:{id:"面向对象三大特性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面向对象三大特性"}},[v._v("#")]),v._v(" 面向对象三大特性")]),v._v(" "),_("p",[v._v("面向对象有 封装 继承 多态 三大特性")]),v._v(" "),_("p",[v._v("封装是指将对象的实现细节隐藏起来，然后通用一些公用方法暴露该对象的功能。")]),v._v(" "),_("p",[v._v("继承是面向对象实现软件复用的重要手段，当子类继承父类时，子类作为一个特殊的父类，将直接获得父类的属性和方法。")]),v._v(" "),_("p",[v._v("多态指的是子类对象可以直接赋值给父类变量，但运行时仍表现出来子类的行为特征，这意味的同一个类型的对象调用同一个方法时，可以表现出多种行为特征")]),v._v(" "),_("p",[v._v("封装把对象的状态信息都隐藏在对象内部，外界无法直接操作或者修改一个好的封装可以实现：")]),v._v(" "),_("p",[v._v("1.隐藏类的实现细节")]),v._v(" "),_("p",[v._v("2.让使用者只能通过事先预定的方法访问数据，还可以限制对成员变量的不合理访问")]),v._v(" "),_("p",[v._v("3.可进行数据检测，有益于保存对象信息的完整性")]),v._v(" "),_("p",[v._v("4.便于修改，提高代码的可维护性")]),v._v(" "),_("p",[_("strong",[v._v("封装其实就是把该隐藏的隐藏起来，把该暴露的暴露出来")])]),v._v(" "),_("p",[v._v("多态的实现：我们在设计程序时，可以把参数类型定义为父类型，调用该方法时，传入相应的子类型的实例，这样就实现了多态。    对于父类型，可以有三种形式，即普通的类、抽象类、接口。对于子类型，则要根据它自身的特征，重写父类的某些方法，或实现抽象类/接口的某些抽象方法。")]),v._v(" "),_("h4",{attrs:{id:"object类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#object类"}},[v._v("#")]),v._v(" object类")]),v._v(" "),_("p",[_("code",[v._v("boolean equals(Object obj)返回指定对象和该对象是否相等")])]),v._v(" "),_("p",[_("code",[v._v("String toString()返回该对象的字符串表示")])]),v._v(" "),_("p",[_("code",[v._v("int hashCode()返回该对象的hashCode值，但是很多类重写了hashCode方法，不在根据地址计算hashCode值")])]),v._v(" "),_("p",[v._v("**wait() notify()  notifyAll()**来控制线程的进行和停止")]),v._v(" "),_("p",[v._v("hashCode()用于获取哈希码（散列码），eauqls()用于比较两个对象是否相等")]),v._v(" "),_("p",[_("strong",[v._v("如果两个对象相同则他们必须有相同的hashCode值")])]),v._v(" "),_("p",[_("strong",[v._v("如果两个对象有相同的hashCode值,则它们未必相同")])]),v._v(" "),_("p",[v._v("因为我们在实际的业务中，两个对象的内容相同，我们就认为这两个对象是相同的，所以我们要重写equal方法，因为hashCode和equal有关联，也要重写hashCode方法来满足这种关联")]),v._v(" "),_("p",[v._v("==运算符比较基本数据类型时比较的是数值，引用类型是地址")]),v._v(" "),_("p",[v._v("equal没重写时也是比较的是地址")]),v._v(" "),_("h4",{attrs:{id:"string类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#string类"}},[v._v("#")]),v._v(" String类")]),v._v(" "),_("p",[v._v("StringBuffer、StringBuilder都代表可变的字符串对象，它们有共同的父类 "),_("code",[v._v("AbstractStringBuilder")]),v._v("，并且两个类的构造方法和成员方法也基本相同。不同的是，StringBuffer是线程安全的，而StringBuilder是非线程安全的，所以StringBuilder性能略高。一般情况下，要创建一个内容可变的字符串，建议优先考虑StringBuilder类。")]),v._v(" "),_("p",[v._v("直接使用字符串变量和new操作时，new操作时会在堆区多开辟一个空间，new操作也会先使用常量池管理这个字符串，然后在堆区在开辟空间。")]),v._v(" "),_("p",[_("strong",[v._v('string a = "abc"')])]),v._v(" "),_("p",[v._v("jvm会先检查常量池中有没有abc这个字符串，如果有的话，会把引用赋值给a，如果没有会先把abc存进去，然后再把引用赋值给a")]),v._v(" "),_("p",[_("strong",[v._v('new String("abc")')])]),v._v(" "),_("p",[v._v("也会在常量池中找abc这个字符串，然后在堆区开辟一个空间，把引用赋值赋给堆区的这个空间。")]),v._v(" "),_("p",[v._v("**+**运算符用来直接拼接字符串直接量")]),v._v(" "),_("p",[v._v("StringBuilder：如果拼接的字符串中包含变量，并不要求线程安全，则适合使用StringBuilder；")]),v._v(" "),_("p",[v._v("StringBuffer：如果拼接的字符串中包含变量，并且要求线程安全，则适合使用StringBuffer；")]),v._v(" "),_("p",[v._v("String类的concat方法：如果只是对两个字符串进行拼接，并且包含变量，则适合使用concat方法；")]),v._v(" "),_("h4",{attrs:{id:"接口和抽象类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#接口和抽象类"}},[v._v("#")]),v._v(" 接口和抽象类")]),v._v(" "),_("p",[v._v("变量前面加上static时这个变量成为类变量或者静态变量，否则就是实例变量或者普通变量或者非静态变量。")]),v._v(" "),_("p",[v._v("静态变量在类加载的时候就已经初始化了，可以通过类名.变量名来访问。")]),v._v(" "),_("p",[v._v("静态变量随着类的销毁而销毁，生命周期和该类一致")]),v._v(" "),_("p",[v._v("方法前面加上static则这个方法就为静态方法，可以通过类名.方法名来执行这个方法。（当方法中不涉及到和对象相关的成员，则把这个方法设计为静态方法）")]),v._v(" "),_("p",[v._v("静态方法不含有this，super关键字")]),v._v(" "),_("p",[v._v("通过静态方法只能访问静态变量和静态方法，因为访问非静态的方法和变量时，需要先创建对象。")]),v._v(" "),_("p",[v._v("static{")]),v._v(" "),_("p",[v._v("}也叫静态代码块，随着类的加载而执行，用来初始化，只会执行一次")]),v._v(" "),_("p",[v._v("new操作，创建子类实例父类也会被加载（而且是先加载），使用类的静态属性，静态方法都会进行类的加载。")]),v._v(" "),_("p",[v._v("一个类加上了final关键字,那么这个类不能被继承，某一个方法被final修饰，那么这个方法不能被子类重写。")]),v._v(" "),_("p",[v._v("抽象类不能被实例化")]),v._v(" "),_("p",[v._v("抽象类不一定要包含abstrac方法")]),v._v(" "),_("p",[v._v("一旦类中包含了abstract方法，那么这个类就必须声明为abstract")]),v._v(" "),_("p",[v._v("abstract只能修饰类和方法")]),v._v(" "),_("p",[v._v("抽象方法不能用private,final,static修饰，这些关键字和重写相违背")]),v._v(" "),_("p",[v._v("抽象类的本质还是类，所以可以有类的各种成员")]),v._v(" "),_("p",[v._v("接口就是给出一些没有实现的方法，封装到一起，到某个类要使用时，再根据具体情况把这些方法写出来。")]),v._v(" "),_("p",[v._v("在jdk8.0以后接口里可以有静态方法，默认方法，可以有方法的具体实现")]),v._v(" "),_("p",[v._v("接口中的属性只能时final的，而且是public static final修饰的")]),v._v(" "),_("p",[v._v("接口中的属性访问可以用接口名.属性名来访问")]),v._v(" "),_("p",[v._v("接口可以继承多个别的接口")]),v._v(" "),_("p",[v._v("接口的修饰符只能为public和默认")]),v._v(" "),_("p",[v._v("继承的价值是解决代码的复用性和可维护性")]),v._v(" "),_("p",[v._v("接口是在于设计好各种规范（方法），让其他类去实现这些方法，更加灵活")]),v._v(" "),_("p",[v._v("接口就好像like-a的关系，而继承是is-a的关系")]),v._v(" "),_("p",[v._v("如果子类需要拓展功能，可以用实现接口的功能来实现")]),v._v(" "),_("h4",{attrs:{id:"泛型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#泛型"}},[v._v("#")]),v._v(" 泛型*")]),v._v(" "),_("p",[v._v("泛型可以对集合里面的数据做一种规范，无需对集合中的数据进行强制类型转换。")]),v._v(" "),_("h4",{attrs:{id:"多线程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#多线程"}},[v._v("#")]),v._v(" 多线程")]),v._v(" "),_("p",[v._v("创建线程有三种方式，继承Thread类，实现Runnable接口，实现Callable接口。")]),v._v(" "),_("p",[v._v("1.定义Thread的子类继承Thread，并重写该类的run（）方法，作为线程的执行体")]),v._v(" "),_("p",[v._v("2.创建这个子类的实例，也就是创建了线程对象")]),v._v(" "),_("p",[v._v("3.调用线程的start（）方法来执行线程")]),v._v(" "),_("p",[v._v("1.定义Runnable接口的实现类，并实现该接口的run方法")]),v._v(" "),_("p",[v._v("2.创建实现类的实例，作为Thread的参数来创建Thread对象")]),v._v(" "),_("p",[v._v("3.调用线程对象的start（）")]),v._v(" "),_("p",[_("strong",[v._v("Thread的构造方法")])]),v._v(" "),_("p",[v._v("Thread（）")]),v._v(" "),_("p",[v._v("Thread（String name）")]),v._v(" "),_("p",[v._v("Thread（Runnable target）")]),v._v(" "),_("p",[v._v("Thread（Runnable target, String name）")]),v._v(" "),_("p",[v._v("name为线程名，target为包含线程体的目标对象")]),v._v(" "),_("p",[_("strong",[v._v("Thread的静态方法")])]),v._v(" "),_("p",[v._v("currentThread（）返回当前正在执行的线程")]),v._v(" "),_("p",[v._v("interrupted（）返回当前线程是否已经被中断")]),v._v(" "),_("p",[v._v("sleep（long millis）使当前线程睡眠多少时间")]),v._v(" "),_("p",[v._v("yield（）使当前线程停止，并允许其他线程执行")]),v._v(" "),_("p",[_("strong",[v._v("Thread常用的实例方法")])]),v._v(" "),_("p",[v._v("getId（）返回线程的id")]),v._v(" "),_("p",[v._v("getName（）返回线程的名字")]),v._v(" "),_("p",[v._v("getPriority（）返回线程的优先级")]),v._v(" "),_("p",[v._v("interrupt()：使该线程中断；")]),v._v(" "),_("p",[v._v("isInterrupted()：返回该线程是否被中断；")]),v._v(" "),_("p",[v._v("isAlive()：返回该线程是否处于活动状态；")]),v._v(" "),_("p",[v._v("isDaemon()：返回该线程是否是守护线程；")]),v._v(" "),_("p",[v._v("setDaemon(boolean on)：将该线程标记为守护线程或用户线程，如果不标记默认是非守护线程；")]),v._v(" "),_("p",[v._v("setName(String name)：设置该线程的名字；")]),v._v(" "),_("p",[v._v("setPriority(int newPriority)：改变该线程的优先级；")]),v._v(" "),_("p",[v._v("join()：等待该线程终止；")]),v._v(" "),_("p",[v._v("join(long millis)：等待该线程终止,至多等待多少毫秒数。")]),v._v(" "),_("p",[_("strong",[v._v("调用start方法时，系统会把run当成线程体来处理，而直接调用run方法时，此时run方法只是一个普通方法，而不是线程执行体")])]),v._v(" "),_("p",[v._v("线程的生命周期为新建，就绪，运行，阻塞，死亡五个状态")]),v._v(" "),_("p",[v._v("当程序创建一个线程对象时，那么这个线程属于新建")]),v._v(" "),_("p",[v._v("调用start方法时，这个线程属于就绪状态")]),v._v(" "),_("p",[v._v("如果处于就绪状态的线程获得了cpu，那么这个线程就处于运行状态，当线程太多时，这是多个线程会进行轮换，而此时就出现了阻塞状态")]),v._v(" "),_("ul",[_("li",[v._v("线程调用sleep()方法主动放弃所占用的处理器资源。")]),v._v(" "),_("li",[v._v("线程调用了一个阻塞式IO方法，在该方法返回之前，该线程被阻塞。")]),v._v(" "),_("li",[v._v("线程试图获得一个同步监视器，但该同步监视器正被其他线程所持有。")]),v._v(" "),_("li",[v._v("线程在等待某个通知（notify）。")]),v._v(" "),_("li",[v._v("程序调用了线程的suspend()方法将该线程挂起。但这个方法容易导致死锁，所以应该尽量避免使用该方法。")])]),v._v(" "),_("p",[_("strong",[v._v("线程同步")])]),v._v(" "),_("p",[v._v("1.同步方法：方法前面加上修饰符synchronized，java的每一个对象都有一个内置锁，用这个关键字修饰方法时，需要获得内置锁才能调用该方法，否则就处于阻塞状态，这个修饰符也可以修饰静态方法，而此时调用方法时会锁住整个类")]),v._v(" "),_("p",[v._v("2.同步代码块：可以用synchronized修饰一个代码块，给这个代码块加上内置锁，从而实现同步")]),v._v(" "),_("p",[_("strong",[v._v("多线程通信方式")])]),v._v(" "),_("p",[v._v("1：wait（），notify（），notifyall（）")]),v._v(" "),_("p",[v._v("如果线程采用的时synchronized来保证线程安全的话，可以用这三个来保证通信，这三个方法都是object类中的方法，因为每个对象都有一个内置锁，可以让当前线程等待某个对象的锁，通过这个对象来操作。")]),v._v(" "),_("p",[v._v("wait（）方法可以让当前线程释放对象锁而进入阻塞状态，notify（）可以用于唤醒一个正在等待对象锁的线程，notifyall用来唤醒所有正在等待的线程。")]),v._v(" "),_("p",[v._v("每个锁对象都有两个队列，一个是就绪队列，一个是阻塞队列。就绪队列存储了已就绪（将要竞争锁）的线程，阻塞队列存储了被阻塞的线程。当一个阻塞线程被唤醒后，才会进入就绪队列，进而等待CPU的调度。反之，当一个线程被wait后，就会进入阻塞队列，等待被唤醒。")]),v._v(" "),_("p",[v._v("sleep（）是Thread中的静态方法，而wait是Object类中的成员方法")]),v._v(" "),_("p",[v._v("sleep（）可以在任何地方使用，而wait只能在同步方法或者同步代码块使用")]),v._v(" "),_("p",[v._v("sleep（）不会释放锁，而wait会释放锁，通过notify来重新获得锁")]),v._v(" "),_("h4",{attrs:{id:"线程池"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#线程池"}},[v._v("#")]),v._v(" 线程池")])])}),[],!1,null,null,null);_.default=r.exports}}]);